// <auto-generated />
using EvaluationSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EvaluationSystem.Migrations
{
    [DbContext(typeof(EvaluationSystemContext))]
    partial class EvaluationSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EvaluationSystem.Models.CommentEval", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<int>("CommentedById")
                        .HasColumnType("int");

                    b.Property<string>("EvaluationComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvaluationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentedById");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentEval");
                });

            modelBuilder.Entity("EvaluationSystem.Models.Evaluation", b =>
                {
                    b.Property<int>("EvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluationId"), 1L, 1);

                    b.Property<int>("GradingPeriodId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EvaluationId");

                    b.HasIndex("GradingPeriodId");

                    b.HasIndex("TermId");

                    b.HasIndex("UserId");

                    b.ToTable("Evaluation");
                });

            modelBuilder.Entity("EvaluationSystem.Models.EvaluationCategory", b =>
                {
                    b.Property<int>("EvaluationCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluationCategoryId"), 1L, 1);

                    b.Property<string>("EvaluationCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EvaluationCategoryId");

                    b.ToTable("EvaluationCategory");
                });

            modelBuilder.Entity("EvaluationSystem.Models.EvaluationDetails", b =>
                {
                    b.Property<int>("EvaluationDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluationDetailsId"), 1L, 1);

                    b.Property<int>("EvaluatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationRatingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EvaluationDetailsId");

                    b.HasIndex("EvaluatedUserId");

                    b.HasIndex("EvaluationCategoryId");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("EvaluationRatingId");

                    b.HasIndex("UserId");

                    b.ToTable("EvaluationDetails");
                });

            modelBuilder.Entity("EvaluationSystem.Models.EvaluationRating", b =>
                {
                    b.Property<int>("EvaluationRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluationRatingId"), 1L, 1);

                    b.Property<string>("EvaluationRatingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvaluationScore")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("EvaluationRatingId");

                    b.ToTable("EvaluationRating");
                });

            modelBuilder.Entity("EvaluationSystem.Models.GradingPeriod", b =>
                {
                    b.Property<int>("GradingPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradingPeriodId"), 1L, 1);

                    b.Property<string>("GradingPeriodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradingPeriodId");

                    b.ToTable("GradingPeriod");
                });

            modelBuilder.Entity("EvaluationSystem.Models.HeadEvaluation", b =>
                {
                    b.Property<int>("HeadEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeadEvaluationId"), 1L, 1);

                    b.Property<int>("EvaluationDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationId")
                        .HasColumnType("int");

                    b.HasKey("HeadEvaluationId");

                    b.HasIndex("EvaluationDetailsId");

                    b.HasIndex("EvaluationId");

                    b.ToTable("HeadEvaluation");
                });

            modelBuilder.Entity("EvaluationSystem.Models.PeerEvaluation", b =>
                {
                    b.Property<int>("PeerEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeerEvaluationId"), 1L, 1);

                    b.Property<int>("EvaluationDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationId")
                        .HasColumnType("int");

                    b.HasKey("PeerEvaluationId");

                    b.HasIndex("EvaluationDetailsId");

                    b.HasIndex("EvaluationId");

                    b.ToTable("PeerEvaluation");
                });

            modelBuilder.Entity("EvaluationSystem.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionId"), 1L, 1);

                    b.Property<string>("PositionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionId");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("EvaluationSystem.Models.Term", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermId"), 1L, 1);

                    b.Property<string>("TermName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TermId");

                    b.ToTable("Term");
                });

            modelBuilder.Entity("EvaluationSystem.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("PositionId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("EvaluationSystem.Models.CommentEval", b =>
                {
                    b.HasOne("EvaluationSystem.Models.User", "CommentedBy")
                        .WithMany()
                        .HasForeignKey("CommentedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationSystem.Models.Evaluation", "Evaluation")
                        .WithMany()
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentedBy");

                    b.Navigation("Evaluation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvaluationSystem.Models.Evaluation", b =>
                {
                    b.HasOne("EvaluationSystem.Models.GradingPeriod", "GradingPeriod")
                        .WithMany()
                        .HasForeignKey("GradingPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationSystem.Models.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradingPeriod");

                    b.Navigation("Term");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvaluationSystem.Models.EvaluationDetails", b =>
                {
                    b.HasOne("EvaluationSystem.Models.User", "EvaluatedUser")
                        .WithMany()
                        .HasForeignKey("EvaluatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationSystem.Models.EvaluationCategory", "EvaluationCategory")
                        .WithMany()
                        .HasForeignKey("EvaluationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationSystem.Models.Evaluation", "Evaluation")
                        .WithMany()
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationSystem.Models.EvaluationRating", "EvaluationRating")
                        .WithMany()
                        .HasForeignKey("EvaluationRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluatedUser");

                    b.Navigation("Evaluation");

                    b.Navigation("EvaluationCategory");

                    b.Navigation("EvaluationRating");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvaluationSystem.Models.HeadEvaluation", b =>
                {
                    b.HasOne("EvaluationSystem.Models.EvaluationDetails", "EvaluationDetails")
                        .WithMany()
                        .HasForeignKey("EvaluationDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationSystem.Models.Evaluation", "Evaluation")
                        .WithMany()
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("EvaluationDetails");
                });

            modelBuilder.Entity("EvaluationSystem.Models.PeerEvaluation", b =>
                {
                    b.HasOne("EvaluationSystem.Models.EvaluationDetails", "EvaluationDetails")
                        .WithMany()
                        .HasForeignKey("EvaluationDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationSystem.Models.Evaluation", "Evaluation")
                        .WithMany()
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("EvaluationDetails");
                });

            modelBuilder.Entity("EvaluationSystem.Models.User", b =>
                {
                    b.HasOne("EvaluationSystem.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });
#pragma warning restore 612, 618
        }
    }
}
